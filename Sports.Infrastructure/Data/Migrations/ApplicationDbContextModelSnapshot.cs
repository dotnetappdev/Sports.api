// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Sports.Infrastructure;

#nullable disable

namespace Sports.Infrastructure.Data.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Sports.Models.DateAndTimeInfo", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<DateTime>("actual_end_time_utc")
                        .HasColumnType("datetime2");

                    b.Property<bool>("actual_end_time_utcSpecified")
                        .HasColumnType("bit");

                    b.Property<DateTime>("actual_start_time_utc")
                        .HasColumnType("datetime2");

                    b.Property<bool>("actual_start_time_utcSpecified")
                        .HasColumnType("bit");

                    b.Property<DateTime>("end_date_local")
                        .HasColumnType("datetime2");

                    b.Property<bool>("end_date_localSpecified")
                        .HasColumnType("bit");

                    b.Property<DateTime>("scheduled_end_time_utc")
                        .HasColumnType("datetime2");

                    b.Property<bool>("scheduled_end_time_utcSpecified")
                        .HasColumnType("bit");

                    b.Property<DateTime>("scheduled_start_time_utc")
                        .HasColumnType("datetime2");

                    b.Property<bool>("scheduled_start_time_utcSpecified")
                        .HasColumnType("bit");

                    b.Property<DateTime>("start_date_local")
                        .HasColumnType("datetime2");

                    b.Property<bool>("start_date_localSpecified")
                        .HasColumnType("bit");

                    b.ToTable("DateAndTimeInfo");
                });

            modelBuilder.Entity("Sports.Models.Meta", b =>
                {
                    b.Property<string>("language")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("update_action")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("update_date")
                        .HasColumnType("datetime2");

                    b.Property<long?>("update_id")
                        .HasColumnType("bigint");

                    b.Property<bool>("update_idSpecified")
                        .HasColumnType("bit");

                    b.ToTable("Metas");
                });

            modelBuilder.Entity("Sports.Models.NavigationInfo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool?>("has_standings")
                        .HasColumnType("bit");

                    b.Property<bool?>("is_knockout")
                        .HasColumnType("bit");

                    b.Property<int>("key")
                        .HasColumnType("int");

                    b.Property<string>("value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("NavigationInfos");
                });

            modelBuilder.Entity("Sports.Models.Property", b =>
                {
                    b.Property<int>("key")
                        .HasColumnType("int");

                    b.ToTable("Properties");
                });

            modelBuilder.Entity("Sports.Models.RelatedSportsEvent", b =>
                {
                    b.Property<string>("depth")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("id")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("navigation_infoId")
                        .HasColumnType("int");

                    b.Property<string>("type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("type_detail")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasIndex("navigation_infoId");

                    b.ToTable("RelatedSportsEvents");
                });

            modelBuilder.Entity("Sports.Models.Sport", b =>
                {
                    b.Property<int>("attendance")
                        .HasColumnType("int");

                    b.Property<bool>("attendanceSpecified")
                        .HasColumnType("bit");

                    b.Property<string>("away_participant_id")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("direct_parent_sports_event_id")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("end_time")
                        .HasColumnType("datetime2");

                    b.Property<bool>("end_timeSpecified")
                        .HasColumnType("bit");

                    b.Property<int>("event_type_detail")
                        .HasColumnType("int");

                    b.Property<bool>("event_type_detailSpecified")
                        .HasColumnType("bit");

                    b.Property<string>("home_participant_id")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("id")
                        .HasColumnType("nvarchar(max)");

                    b.PrimitiveCollection<string>("parent_sports_event_ids")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("participant_type")
                        .HasColumnType("int");

                    b.Property<bool>("participant_typeSpecified")
                        .HasColumnType("bit");

                    b.Property<string>("phase_id")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("result_status")
                        .HasColumnType("int");

                    b.Property<bool>("result_statusSpecified")
                        .HasColumnType("bit");

                    b.Property<int>("schedule_status")
                        .HasColumnType("int");

                    b.Property<bool>("schedule_statusSpecified")
                        .HasColumnType("bit");

                    b.Property<DateTime>("scheduled_start_time_utc")
                        .HasColumnType("datetime2");

                    b.Property<bool>("scheduled_start_time_utcSpecified")
                        .HasColumnType("bit");

                    b.Property<int>("sibling_order")
                        .HasColumnType("int");

                    b.Property<bool>("sibling_orderSpecified")
                        .HasColumnType("bit");

                    b.Property<string>("sport_id")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("sports_discipline_id")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("sports_gender_id")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.PrimitiveCollection<string>("sports_organization_ids")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("start_date_local")
                        .HasColumnType("datetime2");

                    b.Property<bool>("start_date_localSpecified")
                        .HasColumnType("bit");

                    b.Property<int>("status")
                        .HasColumnType("int");

                    b.Property<bool>("statusSpecified")
                        .HasColumnType("bit");

                    b.Property<string>("translation_reference_id")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("type")
                        .HasColumnType("int");

                    b.Property<string>("venue_id")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.ToTable("Sports");
                });

            modelBuilder.Entity("Sports.Models.States", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("key")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("value")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.ToTable("States");
                });

            modelBuilder.Entity("Sports.Models.Value", b =>
                {
                    b.Property<string>("id")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("value")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.ToTable("Values");
                });

            modelBuilder.Entity("Sports.Models.WeatherConditions", b =>
                {
                    b.Property<int>("baseball_home_plate_wind_direction")
                        .HasColumnType("int");

                    b.Property<bool>("baseball_home_plate_wind_directionSpecified")
                        .HasColumnType("bit");

                    b.Property<double>("temperature_celsius")
                        .HasColumnType("float");

                    b.Property<bool>("temperature_celsiusSpecified")
                        .HasColumnType("bit");

                    b.Property<int>("temperature_fahrenheit")
                        .HasColumnType("int");

                    b.Property<bool>("temperature_fahrenheitSpecified")
                        .HasColumnType("bit");

                    b.Property<int>("weather_type")
                        .HasColumnType("int");

                    b.Property<bool>("weather_typeSpecified")
                        .HasColumnType("bit");

                    b.Property<int>("wind_direction")
                        .HasColumnType("int");

                    b.Property<bool>("wind_directionSpecified")
                        .HasColumnType("bit");

                    b.Property<double>("wind_speed_kilometers")
                        .HasColumnType("float");

                    b.Property<bool>("wind_speed_kilometersSpecified")
                        .HasColumnType("bit");

                    b.Property<int>("wind_speed_miles")
                        .HasColumnType("int");

                    b.Property<bool>("wind_speed_milesSpecified")
                        .HasColumnType("bit");

                    b.ToTable("WeatherConditions");
                });

            modelBuilder.Entity("Sports.Models.RelatedSportsEvent", b =>
                {
                    b.HasOne("Sports.Models.NavigationInfo", "navigation_info")
                        .WithMany()
                        .HasForeignKey("navigation_infoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("navigation_info");
                });
#pragma warning restore 612, 618
        }
    }
}
